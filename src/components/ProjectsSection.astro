---
import { teams } from "../data/teams";

// Function to extract image URL from markdown format ![alt](url)
function extractImageUrl(imageMarkdown: string): string {
  const match = imageMarkdown.match(/!\[.*?\]\((.*?)\)/);
  return match ? match[1] : "";
}

// Function to parse links from markdown format [Label](url)
function parseLinks(linksMarkdown: string): Array<{label: string, url: string, icon: string}> {
  if (!linksMarkdown.trim()) return [];
  
  const linkPattern = /\[([^\]]+)\]\(([^)]+)\)/g;
  const links: Array<{label: string, url: string, icon: string}> = [];
  let match;
  
  while ((match = linkPattern.exec(linksMarkdown)) !== null) {
    const label = match[1];
    const url = match[2];
    
    // Map link types to icons
    let icon = "mdi:link"; // default
    if (label.toLowerCase().includes("github")) {
      icon = "mdi:github";
    } else if (label.toLowerCase().includes("demo")) {
      icon = "mdi:play-circle";
    } else if (label.toLowerCase().includes("canva")) {
      icon = "mdi:palette";
    } else if (label.toLowerCase().includes("slides")) {
      icon = "mdi:presentation";
    }
    
    links.push({ label, url, icon });
  }
  
  return links;
}

// Function to parse team members from mixed markdown/plain text format
function parseMembers(membersString: string): Array<{name: string, url?: string, icon: string}> {
  if (!membersString.trim()) return [];
  
  const memberLines = membersString.split('\n').map(line => line.trim()).filter(line => line);
  const members: Array<{name: string, url?: string, icon: string}> = [];
  
  memberLines.forEach(line => {
    // Check if line contains markdown link [Name](URL)
    const linkMatch = line.match(/\[([^\]]+)\]\(([^)]+)\)/);
    if (linkMatch) {
      const name = linkMatch[1];
      const url = linkMatch[2];
      
      // Map URL types to icons
      let icon = "mdi:account-circle"; // default for linked members
      if (url.includes('github.com')) {
        icon = "mdi:github";
      } else if (url.includes('linkedin.com')) {
        icon = "mdi:linkedin";
      } else if (url.includes('twitter.com') || url.includes('x.com')) {
        icon = "mdi:twitter";
      }
      
      members.push({ name, url, icon });
    } else {
      // Plain text member name
      members.push({ name: line, icon: "mdi:account" });
    }
  });
  
  return members;
}
---

<section id="projects" class="w-full bg-black pt-24 pb-16">
  <div class="max-w-6xl mx-auto px-8">
    <h2
      class="text-4xl md:text-7xl text-white mb-6 text-center tracking-wide font-display scroll-animate fade-down"
    >
      PROJECTS
    </h2>

    <div
      class="inline-block text-white px-6 py-3 rounded-lg mb-12 text-xl md:text-2xl font-medium transform -rotate-2 bg-[#19806f] scroll-animate bounce-up stagger-1 mx-auto block text-center"
      style="font-family: 'K2D', sans-serif;"
    >
      ‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô üé®
    </div>

    <div class="grid md:grid-cols-2 gap-8 max-w-6xl mx-auto">
      {
        teams.map((team, index) => {
          const imageUrl = extractImageUrl(team.project.image);
          const links = parseLinks(team.project.links);
          const members = parseMembers(team.members);
          
          return (
            <div
              id={team.slug}
              class={`bg-gray-900 rounded-xl border border-gray-800 hover:border-[#19806f] transition-all duration-300 overflow-hidden scroll-animate fade-up stagger-${index + 2}`}
            >
              {/* Project Image */}
              {imageUrl && (
                <div class="aspect-[1200/630] overflow-hidden">
                  <img
                    src={imageUrl}
                    alt={team.project.name}
                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                  />
                </div>
              )}
              
              {/* Content */}
              <div class="p-6">
                {/* Project Name & Team */}
                <div class="mb-4">
                  <div class="flex items-center gap-2 mb-2 group">
                    <h3
                      class="text-xl font-bold text-white"
                      style="font-family: 'K2D', sans-serif;"
                    >
                      {team.project.name}
                    </h3>
                    <a
                      href={`#${team.slug}`}
                      title="Copy permalink"
                      class="copy-permalink-link text-gray-500 hover:text-white transition-all opacity-0 group-hover:opacity-100"
                      data-slug={team.slug}
                    >
                      <iconify-icon icon="mdi:link-variant" class="text-lg"></iconify-icon>
                    </a>
                  </div>
                  <p class="text-[#19806f] font-medium text-sm mb-3">
                    by {team.name}
                  </p>
                  
                  {/* Team Members */}
                  {members.length > 0 && (
                    <div class="flex flex-wrap gap-2 mb-3">
                      {members.map((member) => (
                        member.url ? (
                          <a
                            href={member.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-flex items-center gap-1.5 px-2 py-1 bg-gray-800 hover:bg-gray-700 text-gray-300 hover:text-white text-xs rounded-md transition-colors"
                          >
                            <iconify-icon icon={member.icon} class="text-sm"></iconify-icon>
                            {member.name}
                          </a>
                        ) : (
                          <span class="inline-flex items-center gap-1.5 px-2 py-1 bg-gray-800 text-gray-300 text-xs rounded-md">
                            <iconify-icon icon={member.icon} class="text-sm"></iconify-icon>
                            {member.name}
                          </span>
                        )
                      ))}
                    </div>
                  )}
                </div>

                {/* Description */}
                <p class="text-gray-300 leading-relaxed mb-4 text-sm">
                  {team.project.description.length > 200 
                    ? team.project.description.substring(0, 200) + "..." 
                    : team.project.description
                  }
                </p>

                {/* Links */}
                {links.length > 0 && (
                  <div class="flex flex-wrap gap-3 mb-4">
                    {links.map((link) => (
                      <a
                        href={link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center gap-2 px-3 py-2 bg-gray-800 hover:bg-[#19806f] text-white text-sm rounded-lg transition-colors"
                      >
                        <iconify-icon icon={link.icon} class="text-lg"></iconify-icon>
                        {link.label}
                      </a>
                    ))}
                  </div>
                )}

                {/* Manorah Commentary */}
                <div class="border-t border-gray-800 pt-4 mt-4">
                  <div class="flex items-start gap-3">
                    <iconify-icon 
                      icon="mdi:drama-masks" 
                      class="text-[#19806f] text-xl mt-1 flex-shrink-0"
                    ></iconify-icon>
                    <div>
                      <h4 class="text-[#19806f] font-semibold text-sm mb-2" style="font-family: 'K2D', sans-serif;">
                        ‡∏°‡πÇ‡∏ô‡∏£‡∏≤‡∏´‡πå‡∏ß‡πà‡∏≤‡πÑ‡∏á
                      </h4>
                      <p class="text-gray-300 text-sm leading-relaxed italic">
                        {team.manorah}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const copyButtons = document.querySelectorAll('.copy-permalink-button');

    copyButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        const slug = button.dataset.slug;
        if (!slug) return;

        const url = `${window.location.href.split('#')[0]}#${slug}`;

        try {
          await navigator.clipboard.writeText(url);

          // Provide visual feedback
          const icon = button.querySelector('iconify-icon');
          if (icon) {
            const originalIcon = icon.getAttribute('icon');
            icon.setAttribute('icon', 'mdi:check');
            button.setAttribute('title', 'Copied!');

            setTimeout(() => {
              icon.setAttribute('icon', originalIcon);
              button.setAttribute('title', 'Copy permalink');
            }, 1500);
          }
        } catch (err) {
          console.error('Failed to copy: ', err);
          button.setAttribute('title', 'Failed to copy');
        }
      });
    });
  });
</script>